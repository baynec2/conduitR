message("Failed to download FASTA for Proteome: ", proteome_id)
message("Error code: ", httr2::resp_status(download_response))
}
message("Error code: ", httr2::resp_status(req))
# Save FASTA content to file
if (httr2::resp_status(req) < 400 && httr2::resp_headers(req)$`content-length` != "0" ) {
writeLines(httr2::resp_body_string(req), fasta_fp)
message(
"Fasta File for Proteome ID: ",
proteome_id, " sucessfully downloaded"
)
} else {
message("Failed to download FASTA for Proteome: ", proteome_id)
message("Error code: ", httr2::resp_status(req))
}
test_that("this works", {
proteome_id = "UP000270929"
get_fasta_file(proteome_id)
})
devtools::load_all()
test_that("this works", {
proteome_id = "UP000270929"
get_fasta_file(proteome_id)
})
test_that("this works", {
proteome_id = "UP000270929"
get_fasta_file(proteome_id)
})
devtools::load_all()
test_that("this works", {
proteome_id = "UP000270929"
get_fasta_file(proteome_id)
})
get_fasta_file(proteome_id)
proteome_id = "UP000270929"
get_fasta_file(proteome_id)
httr2::resp_headers(response)$`content-length` == "0"
httr2::resp_headers(req)$`content-length` == "0"
httr2::resp_headers(req)$`body` == "0"
httr2::resp_headers(req)$`body`
httr2::resp_headers(req)
proteome_id = "UP000270929"
# Define the base url
base_url <- paste0(
"https://rest.uniprot.org/uniprotkb/stream?query="
)
req <- httr2::request(base_url) |>
httr2::req_url_query(
query = paste0("proteome:", proteome_id),
format = "fasta"
) |>
httr2::req_perform()
# Define the fasta file path
fasta_fp <- paste0(fasta_dir, "/", proteome_id, ".fasta")
out <- tibble::tibble(
proteome_id = proteome_id,
resp_status = httr2::resp_status(req)
)
httr2::resp_headers(req)
httr2::resp_headers(req)$content-type
httr2::resp_headers(req)
httr2::resp_header(req,"content-type")
proteome_id = "UP000050895"
# Define the base url
base_url <- paste0(
"https://rest.uniprot.org/uniprotkb/stream?query="
)
req <- httr2::request(base_url) |>
httr2::req_url_query(
query = paste0("proteome:", proteome_id),
format = "fasta"
) |>
httr2::req_perform()
# Define the fasta file path
fasta_fp <- paste0(fasta_dir, "/", proteome_id, ".fasta")
out <- tibble::tibble(
proteome_id = proteome_id,
resp_status = httr2::resp_status(req)
)
httr2::resp_header(req,"content-type")
httr2::resp_header(req,"body")
httr2::resp_has_body()
httr2::resp_has_body(req)
# For whatever reason, this id downloads but has no body.
test_that("this works", {
proteome_id = "UP000050895"
get_fasta_file(proteome_id)
})
devtools::document()
devtools::load_all()
test_that("this works", {
proteome_id = "UP000270929"
expect_no_error(get_fasta_file(proteome_id))
})
# For whatever reason, this id downloads but has no body.
test_that("this works", {
proteome_id = "UP000050895"
get_fasta_file(proteome_id)
})
get_fasta_file(proteome_id)
proteome_id = "UP000050895"
get_fasta_file(proteome_id)
# Define the base url
base_url <- paste0(
"https://rest.uniprot.org/uniprotkb/stream?query="
)
req <- httr2::request(base_url) |>
httr2::req_url_query(
query = paste0("proteome:", proteome_id),
format = "fasta"
) |>
httr2::req_perform()
# Define the fasta file path
fasta_fp <- paste0(fasta_dir, "/", proteome_id, ".fasta")
out <- tibble::tibble(
proteome_id = proteome_id,
resp_status = httr2::resp_status(req)
)
# Save FASTA content to file
if (httr2::resp_status(req) < 400) {
writeLines(httr2::resp_body_string(req), fasta_fp)
message(
"Fasta File for Proteome ID: ",
proteome_id, " sucessfully downloaded"
)
} else {
message("Failed to download FASTA for Proteome: ", proteome_id)
message("Error code: ", httr2::resp_status(req))
}
# Save FASTA content to file
if (httr2::resp_status(req) < 400 & httr2::resp_has_body(req)) {
writeLines(httr2::resp_body_string(req), fasta_fp)
message(
"Fasta File for Proteome ID: ",
proteome_id, " sucessfully downloaded"
)
} else {
message("Failed to download FASTA for Proteome: ", proteome_id)
message("status code: ", httr2::resp_status(req))
message("has body: ", httr2::resp_has_body(req))
}
# Save FASTA content to file
if (httr2::resp_status(req) < 400 & httr2::resp_has_body(req)) {
writeLines(httr2::resp_body_string(req), fasta_fp)
message(
"Fasta File for Proteome ID: ",
proteome_id, " sucessfully downloaded"
)
} else {
message("Failed to download FASTA for Proteome: ", proteome_id)
message("status code: ", httr2::resp_status(req))
message("has body: ", httr2::resp_has_body(req))
}
devtools::load_all()
test_that("this works", {
proteome_id = "UP000270929"
expect_no_error(get_fasta_file(proteome_id))
})
proteome_id = "UP000050895"
get_fasta_file(proteome_id)
# For whatever reason, this id downloads but has no body.
test_that("this works", {
proteome_id = "UP000050895"
expect_message(get_fasta_file(proteome_id),"Failed to download FASTA for Proteome: UP000050895")
})
# For whatever reason, this id downloads but has no body. Making sure a message is found for this case.
test_that("this works", {
proteome_id = "UP000050895"
expect_message(get_fasta_file(proteome_id),"Failed to download FASTA for Proteome: UP000050895")
})
usethis::use_test
usethis::use_test()
pg_groups = readr::read_tsv("inst/extdata/report.pg_matrix.tsv")
uniprot_ids = pg_groups |>
dplyr::pull("Protein.Group") |>
strsplit(";") |>
unlist() |>
unique()
out = get_annotations_from_uniprot(uniprot_ids)
View(out)
usethis::use_test()
"ype:YPO2670;ypk:y1242;ypm:YP_2471;"
kegg_ids = "ype:YPO2670;ypk:y1242;ypm:YP_2471;"
get_kegg_in_batches(kegg_ids)
kegg_ids = "ype:YPO2670"
get_kegg_in_batches(kegg_ids)
kegg_ids = "ype:YPO2670;"
get_kegg_in_batches(kegg_ids)
devtools::load_all()
kegg_ids = "ype:YPO2670"
get_kegg_in_batches(kegg_ids)
kegg_ids = "ype:YPO2670;"
get_kegg_in_batches(kegg_ids)
test_that("works with multiple ;", {
kegg_ids = "ype:YPO2670;ypk:y1242;ypm:YP_2471;"
get_kegg_in_batches(kegg_ids)
})
kegg_ids = "ype:YPO2670;ypk:y1242;ypm:YP_2471;"
get_kegg_in_batches(kegg_ids)
# splitting by ; if need be
split_ids <- str_split(kegg_ids, ";", simplify = FALSE)[[1]]
# splitting by ; if need be
split_ids <- stringr::str_split(kegg_ids, ";", simplify = FALSE)[[1]]
split_ids
split_ids <- split_ids[split_ids != ""]
kegg_ids = "ype:YPO2670;ypk:y1242;ypm:YP_2471;"
get_kegg_in_batches(kegg_ids)
test_that("works with trailing ;", {
kegg_ids = "ype:YPO2670;"
get_kegg_in_batches(kegg_ids)
})
library(testthat)
test_that("works with trailing ;", {
kegg_ids = "ype:YPO2670;"
get_kegg_in_batches(kegg_ids)
})
test_that("works with multiple ;", {
kegg_ids = "ype:YPO2670;ypk:y1242;ypm:YP_2471;"
get_kegg_in_batches(kegg_ids)
})
kegg_ids = "ype:YPO2670"
expect_no_error(get_kegg_in_batches(kegg_ids))
test_that("works with no trailing ;", {
kegg_ids = "ype:YPO2670"
expect_no_error(get_kegg_in_batches(kegg_ids))
})
test_that("works with trailing ;", {
kegg_ids = "ype:YPO2670;"
expect_no_error(get_kegg_in_batches(kegg_ids))
})
test_that("works with multiple ;", {
kegg_ids = "ype:YPO2670;ypk:y1242;ypm:YP_2471;"
expect_no_error(get_kegg_in_batches(kegg_ids))
})
?split_ids
??split_ids
kegg_ids <- split_ids[kegg_ids != ""]
# splitting by ;
kegg_ids <- stringr::str_split(kegg_ids, ";", simplify = FALSE)[[1]]
kegg_ids <- split_ids[kegg_ids != ""]
test_that("works with no trailing ;", {
kegg_ids = "ype:YPO2670"
expect_no_error(get_kegg_in_batches(kegg_ids))
})
stringr::split
test_that("works with trailing ;", {
kegg_ids = "ype:YPO2670;"
expect_no_error(get_kegg_in_batches(kegg_ids))
})
test_that("works with trailing ;", {
kegg_ids = "ype:YPO2670;"
expect_no_error(get_kegg_in_batches(kegg_ids))
})
test_that("works with multiple ;", {
kegg_ids = "ype:YPO2670;ypk:y1242;ypm:YP_2471;"
expect_no_error(get_kegg_in_batches(kegg_ids))
})
?split
?split_ids
test_that("works with no trailing ;", {
kegg_ids = "ype:YPO2670"
expect_no_error(get_kegg_in_batches(kegg_ids))
})
test_that("works with trailing ;", {
kegg_ids = "ype:YPO2670;"
expect_no_error(get_kegg_in_batches(kegg_ids))
})
test_that("works with multiple ;", {
kegg_ids = "ype:YPO2670;ypk:y1242;ypm:YP_2471;"
expect_no_error(get_kegg_in_batches(kegg_ids))
})
kegg_ids = "BN938_0910;"
expect_no_error(get_kegg_in_batches(kegg_ids))
get_kegg_in_batches(kegg_ids)
kegg_ids = "rbc:BN938_0910;"
expect_no_error(get_kegg_in_batches(kegg_ids))
get_kegg_in_batches(kegg_ids)
KEGGREST::keggGet
#'
#' @param kegg_ids = kegg ides in the format "hsa:1234"
#'
#' @returns
#' @export
#'
#' @examples
#'
#' insulin <- get_kegg_in_batches("hsa:3630")
#'
get_kegg_in_batches <- function(kegg_ids, batch_size = 10) {
# splitting by ;
split_ids <- stringr::str_split(kegg_ids, ";", simplify = FALSE)[[1]]
split_ids <- split_ids[split_ids != ""]
# Initiating list
all_results <- list()
# Split IDs into batches
batches <- split(split_ids, ceiling(seq_along(kegg_ids) / batch_size))
for (i in seq_along(batches)) {
message(sprintf("Processing batch %d of %d of KEGG Ids", i, length(batches)))
batch <- batches[[i]]
# Fetch KEGG entries
entries <- lapply(batch, function(id) {
tryCatch(KEGGREST::keggGet(id), error = function(e) NULL)
})
# Flatten list and remove NULLs
entries <- unlist(entries, recursive = FALSE)
entries <- entries[!sapply(entries, is.null)]
# Process each entry and store results
if (length(entries) > 0) {
results <- purrr::map_dfr(entries, function(entry) {
if (is.null(entry)) {
return(NULL)
} # Handle missing entries gracefully
gene_num <- entry$ENTRY # Gene ID
org_id <- names(entry$ORGANISM) # Organism ID
gene_id <- paste0(org_id, ":", gene_num) # Full gene ID
# Extract KO ID safely
ko <- if (!is.null(entry$ORTHOLOGY)) names(entry$ORTHOLOGY) else NA_character_
# Extract KEGG Pathway
kegg_pathway <- if (!is.null(entry$PATHWAY)) {
paste0(paste0(entry$PATHWAY, " [", names(entry$PATHWAY), "]"), collapse = "; ")
} else {
NA_character_
}
# Return extracted info as a tibble
tibble::tibble(
kegg_id = gene_id,
ko = ko,
kegg_pathway = kegg_pathway # ,
# brite_info = brite_info
)
})
all_results[[i]] <- results
}
# Avoid hitting KEGG rate limits (3x per second)
Sys.sleep(0.5)
}
# Combine all batch results into a single dataframe
out <- dplyr::bind_rows(all_results) |>
# Formatting into a useful format
dplyr::mutate(kegg_pathway_list = stringr::str_split(kegg_pathway, "; ")) |>
tidyr::unnest(kegg_pathway_list) |>
dplyr::mutate(
kegg_pathway = stringr::str_extract(kegg_pathway_list, "^[^\\[]+"), # Extract pathway name (before bracket)
code = stringr::str_extract(kegg_pathway_list, "\\[([^\\]]+)\\]") # Extract code (inside brackets)
) |>
dplyr::mutate(
pathway = stringr::str_trim(kegg_pathway), # Clean up any leading/trailing spaces
code = stringr::str_remove_all(code, "[\\[\\]]") # Remove brackets from code
) |>
dplyr::select(kegg_pathway, kegg_id, ko, code)
return(out)
}
log2(-100)
22-18
knitr::opts_chunk$set(echo = TRUE)
library(probiomecatalystR)
org_ids = readr::read_delim("organisms.txt")
probiomecatalystR::download_fasta_from_organism_ids(
organism_ids = org_ids$organism_id,destination_fp = "100000_theshold_db.fasta"
)
class(org_ids$organism_id)
probiomecatalystR::download_fasta_from_organism_ids(
organism_ids = as.character(org_ids$organism_id),destination_fp = "100000_theshold_db.fasta"
)
rlang::last_trace()
rlang::last_trace()
View(org_ids)
usethis::use_test()
test_that("this work with char", {
expect_no_error(download_fasta_from_organism_ids(c("818","9606")))
})
devtools::load_all()
test_that("this work with char", {
expect_no_error(download_fasta_from_organism_ids(c("818","9606")))
})
test_that("this works with numeric ids", {
expect_no_error(download_fasta_from_organism_ids(c(818,9606)))
})
}
test_that("this works when one of the ids is wrong",{
expect_no_error(download_fasta_from_organism_ids(818,"9606dfsaasd"))
})
test_that("this works when one of the ids is wrong",{
expect_no_error(download_fasta_from_organism_ids(818,"9606dfsaasd"))
})
expect_no_error(download_fasta_from_organism_ids(c(818,"9606dfsaasd")))
test_that("this works when one of the ids is wrong", {
expect_no_error(download_fasta_from_organism_ids(c(818,"9606dfsaasd")))
})
org_ids
org_ids$organism_id
cat(org_ids$organism_id,sep = ",")
probiomecatalystR::download_fasta_from_organism_ids(
organism_ids = as.character(org_ids$organism_id),destination_fp = "100000_theshold_db.fasta"
)
rlang::last_trace()
usethis::use_test()
prob =c(10090,818,927665,1339352,1401073,1339280,457389,1287488,1339350,328812,
357276,1574265,246787,46506,28116,821,1679444,47678,1780376,371601,162156,
820,823,1739298,338188,674529,1796613,239935,1965650,871325,77133,2024223,
2320102,2486468,28111,2486471,349741,449673,2030927,2489214,39491,2292240,
702446,471870,484018,626522,537013,679189,469590,563193,657314,470145,
226186,679935,908612,997884,679937,997887,997873,657309,665953,457387,709991,
997881,469585,997877,585544,556259,742817,868129,888743,762982,817,667015,
188937,295405,999418,742726,999419,742727,1262753,880074,547042,1235785,
702447,397290,1262986,1235786,397291,397288)
test_that("it works with problematic ids", {
expect_no_error(get_proteome_ids_from_organism_ids(prob))
})
expect_no_error(get_proteome_ids_from_organism_ids(as.character(prob)))
prob =c(10090,818)
test_that("it works with problematic ids", {
expect_no_error(get_proteome_ids_from_organism_ids(as.character(prob)))
})
ids = c(818,9606)
id = ids
# Base URL for request
base_url <- "https://rest.uniprot.org/proteomes/search?query="
query <- paste0(paste0("organism_id:", id))
req <- httr2::request(base_url) |>
httr2::req_url_query(
query = query,
format = "tsv" # Max limit per request
) |>
httr2::req_perform()
# Base URL for request
base_url <- "https://rest.uniprot.org/proteomes/search?query="
query <- paste0(paste0("organism_id:", id))
req <- httr2::request(base_url) |>
httr2::req_url_query(
query = query,
format = "tsv" # Max limit per request
) |>
httr2::req_perform()
id = 818
req <- httr2::request(base_url) |>
httr2::req_url_query(
query = query,
format = "tsv" # Max limit per request
) |>
httr2::req_perform()
# Base URL for request
base_url <- "https://rest.uniprot.org/proteomes/search?query="
query <- paste0(paste0("organism_id:", id))
req <- httr2::request(base_url) |>
httr2::req_url_query(
query = query,
format = "tsv" # Max limit per request
) |>
httr2::req_perform()
httr2::resp_body_string(req) |>
readr::read_tsv(show_col_types = FALSE)
httr2::resp_body_string(req) |>
readr::read_tsv(show_col_types = FALSE,col_types = "cccn")
httr2::resp_body_string(req) |>
readr::read_tsv(show_col_types = FALSE,col_types = "ccnn")
prob =c(10090,818,927665,1339352,1401073,1339280,457389,1287488,1339350,328812,
357276,1574265,246787,46506,28116,821,1679444,47678,1780376,371601,162156,
820,823,1739298,338188,674529,1796613,239935,1965650,871325,77133,2024223,
2320102,2486468,28111,2486471,349741,449673,2030927,2489214,39491,2292240,
702446,471870,484018,626522,537013,679189,469590,563193,657314,470145,
226186,679935,908612,997884,679937,997887,997873,657309,665953,457387,709991,
997881,469585,997877,585544,556259,742817,868129,888743,762982,817,667015,
188937,295405,999418,742726,999419,742727,1262753,880074,547042,1235785,
702447,397290,1262986,1235786,397291,397288)
prob =c(10090,818)
prob =c(10090,818,927665,1339352,1401073,1339280,457389,1287488,1339350,328812,
357276,1574265,246787,46506,28116,821,1679444,47678,1780376,371601,162156,
820,823,1739298,338188,674529,1796613,239935,1965650,871325,77133,2024223,
2320102,2486468,28111,2486471,349741,449673,2030927,2489214,39491,2292240,
702446,471870,484018,626522,537013,679189,469590,563193,657314,470145,
226186,679935,908612,997884,679937,997887,997873,657309,665953,457387,709991,
997881,469585,997877,585544,556259,742817,868129,888743,762982,817,667015,
188937,295405,999418,742726,999419,742727,1262753,880074,547042,1235785,
702447,397290,1262986,1235786,397291,397288)
test_that("it works with problematic ids", {
expect_no_error(get_proteome_ids_from_organism_ids(as.character(prob)))
})
devtools::load_all()
prob =c(10090,818,927665,1339352,1401073,1339280,457389,1287488,1339350,328812,
357276,1574265,246787,46506,28116,821,1679444,47678,1780376,371601,162156,
820,823,1739298,338188,674529,1796613,239935,1965650,871325,77133,2024223,
2320102,2486468,28111,2486471,349741,449673,2030927,2489214,39491,2292240,
702446,471870,484018,626522,537013,679189,469590,563193,657314,470145,
226186,679935,908612,997884,679937,997887,997873,657309,665953,457387,709991,
997881,469585,997877,585544,556259,742817,868129,888743,762982,817,667015,
188937,295405,999418,742726,999419,742727,1262753,880074,547042,1235785,
702447,397290,1262986,1235786,397291,397288)
test_that("it works with problematic ids", {
expect_no_error(get_proteome_ids_from_organism_ids(as.character(prob)))
})
knitr::opts_chunk$set(echo = TRUE)
library(probiomecatalystR)
org_ids = readr::read_delim("organisms.txt")
probiomecatalystR::download_fasta_from_organism_ids(
organism_ids = as.character(org_ids$organism_id),destination_fp = "100000_theshold_db.fasta"
)
devtools::load_all()
pco = create_probiomeconduit_obj("tests/data/prepare_qfeature/qf.rds",
database_taxonomy.tsv = "tests/data/prepare_qfeature/database_taxonomy.tsv",
database_metrics.tsv = "tests/data/prepare_qfeature/database_metrics.tsv",
detected_protein_taxonomy.tsv = "tests/data/prepare_qfeature/detected_protein_taxonomy.tsv",
detected_protein_metrics.tsv = "tests/data/prepare_qfeature/detected_protein_metrics.tsv")
pco
pco
test_that("can create a probiomeconduit_obj", {
expect_no_error(create_probiomeconduit_obj("tests/data/prepare_qfeature/qf.rds",
database_taxonomy.tsv = "tests/data/prepare_qfeature/database_taxonomy.tsv",
database_metrics.tsv = "tests/data/prepare_qfeature/database_metrics.tsv",
detected_protein_taxonomy.tsv = "tests/data/prepare_qfeature/detected_protein_taxonomy.tsv",
detected_protein_metrics.tsv = "tests/data/prepare_qfeature/detected_protein_metrics.tsv"))
})
