################################################################################
# 00 processing matrices
################################################################################
rule process_taxonomic_matrices:
  input:
    report_pr_matrix=os.path.join(EXPERIMENT_DIR, "output/01_diann_output/report.pr_matrix.tsv"),
    protein_info=os.path.join(EXPERIMENT_DIR, "input/00_database_resources/02_protein_info.txt")
  output:
    domain_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/domain_matrix.tsv"),
    kingdom_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/kingdom_matrix.tsv"),
    phylum_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/phylum_matrix.tsv"),
    class_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/class_matrix.tsv"),
    order_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/order_matrix.tsv"),
    family_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/family_matrix.tsv"),
    genus_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/genus_matrix.tsv"),
    species_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/species_matrix.tsv")
  log: get_log_path("process_taxonomic_matrices")
  container: "apptainer/conduitR.sif"
  script: "scripts/03_processing_matrices/00_processing_taxonomic_matrices.R"
    
rule process_go_matrix:
  input:
    report_pg_matrix=os.path.join(EXPERIMENT_DIR, "output/01_diann_output/report.pg_matrix.tsv"),
    go_annotations = os.path.join(EXPERIMENT_DIR, "input/00_database_resources/detected_protein_resources/03_go_annotations.txt")
  output: 
    go_annotations_matrix = os.path.join(EXPERIMENT_DIR, "output/03_output_files/go_matrix.tsv"),
    go_annotations_taxa_matrix = os.path.join(EXPERIMENT_DIR, "output/03_output_files/go_taxa_matrix.tsv")
  log: get_log_path("process_go_matrix")
  container: "apptainer/conduitR.sif"
  script: "scripts/03_processing_matrices/01_process_go_matrix.R"
  
rule process_subcellular_locations_matrix:
  input:
    report_pg_matrix=os.path.join(EXPERIMENT_DIR, "output/01_diann_output/report.pg_matrix.tsv"),
    subcellular_locations = os.path.join(EXPERIMENT_DIR, "input/00_database_resources/detected_protein_resources/04_subcellular_locations.txt")
  output: 
    subcellular_locations_matrix = os.path.join(EXPERIMENT_DIR, "output/03_output_files/subcellular_locations_matrix.tsv")
  log: get_log_path("process_subcellular_locations_matrix")
  container: "apptainer/conduitR.sif"
  script:"scripts/03_processing_matrices/02_process_subcellular_locations_matrix.R"
  
# rule process_kegg_matrices:
#   input:
#     report_pg_matrix="output/03_diann_output/report.pg_matrix.tsv"
#   output: 
#     kegg_matrix = "output/05_output_files/subcellular_locations_matrix.tsv"
#   script:"scripts/06_processing_matrices/03_process_kegg_matrix.R"  
# 

rule process_diann_matrices:
  input:
    report_pg_matrix=os.path.join(EXPERIMENT_DIR, "output/01_diann_output/report.pg_matrix.tsv"),
    report_pr_matrix =os.path.join(EXPERIMENT_DIR, "output/01_diann_output/report.pr_matrix.tsv")
  output: 
    protein_group_matrix = os.path.join(EXPERIMENT_DIR, "output/03_output_files/protein_group_matrix.tsv"),
    precursor_matrix = os.path.join(EXPERIMENT_DIR, "output/03_output_files/precursor_matrix.tsv"),
    peptide_matrix = os.path.join(EXPERIMENT_DIR, "output/03_output_files/peptide_matrix.tsv")
  log: get_log_path("process_diann_matrices")
  container: "apptainer/conduitR.sif"
  script:"scripts/03_processing_matrices/04_process_diann_matrices.R"
    
    
rule move_database_resources:
    input:
        expand(os.path.join(EXPERIMENT_DIR, "input/00_database_resources/{filename}"), 
               filename=[
                   "00_database.fasta",
                   "00_proteome_ids.txt",
                   "01_taxonomy.txt",
                   "02_protein_info.txt",
                   "03_taxonomic_tree_of_database.pdf",
                   "04_database.predicted.speclib",
                   "README.md",
                   "README.html"
               ]),
        expand(os.path.join(EXPERIMENT_DIR, "input/00_database_resources/detected_protein_resources/{filename}"), 
               filename=[
                   "00_detected_protein_info.txt",
                   "01_detected_protein.fasta",
                   "02_uniprot_annotated_protein_info.txt",
                   "03_go_annotations.txt",
                   "04_subcellular_locations.txt",
                   "05_kegg_annotations.txt"
               ]),
    output:
        expand(os.path.join(EXPERIMENT_DIR, "output/00_database_resources/{filename}"), 
               filename=[
                   "00_database.fasta",
                   "00_proteome_ids.txt",
                   "01_taxonomy.txt",
                   "02_protein_info.txt",
                   "03_taxonomic_tree_of_database.pdf",
                   "04_database.predicted.speclib",
                   "README.md",
                   "README.html"
               ]),
        expand(os.path.join(EXPERIMENT_DIR, "output/00_database_resources/detected_protein_resources/{filename}"), 
               filename=[
                   "00_detected_protein_info.txt",
                   "01_detected_protein.fasta",
                   "02_uniprot_annotated_protein_info.txt",
                   "03_go_annotations.txt",
                   "04_subcellular_locations.txt",
                   "05_kegg_annotations.txt"
               ]),
    log: get_log_path("move_database_resources")
    shell:
        """
        mkdir -p output/00_database_resources/detected_protein_resources
        cp -u -r input/00_database_resources/* output/00_database_resources/
        cp -u -r input/00_database_resources/detected_protein_resources/* output/00_database_resources/detected_protein_resources/
        """
################################################################################
# 01 Ingestion into R
################################################################################
# Prepare a QFeatures object with all the data
rule prepare_qf:
  input:
    annotation = os.path.join(EXPERIMENT_DIR, "input/sample_annotation.txt"),
    precursor_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/precursor_matrix.tsv"),
    peptide_matrix = os.path.join(EXPERIMENT_DIR, "output/03_output_files/peptide_matrix.tsv"),
    protein_group_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/protein_group_matrix.tsv"),
    domain_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/domain_matrix.tsv"),
    kingdom_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/kingdom_matrix.tsv"),
    phylum_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/phylum_matrix.tsv"),
    class_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/class_matrix.tsv"),
    order_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/order_matrix.tsv"),
    family_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/family_matrix.tsv"),
    genus_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/genus_matrix.tsv"),
    species_matrix=os.path.join(EXPERIMENT_DIR, "output/03_output_files/species_matrix.tsv"),
    go_matrix = os.path.join(EXPERIMENT_DIR, "output/03_output_files/go_matrix.tsv"),
    go_taxa_matrix = os.path.join(EXPERIMENT_DIR, "output/03_output_files/go_taxa_matrix.tsv"),
    subcellular_locations_matrix = os.path.join(EXPERIMENT_DIR, "output/03_output_files/subcellular_locations_matrix.tsv")
  output:
    qf= os.path.join(EXPERIMENT_DIR, "output/03_output_files/qf.rds")
  log: get_log_path("prepare_qf")
  container: "apptainer/conduitR.sif"
  script:
    "scripts/04_ingestion_into_R/00_prepare_qf.R"
    
# prepare metrics    
rule extract_metrics:
  input:
    protein_info = os.path.join(EXPERIMENT_DIR, "output/00_database_resources/02_protein_info.txt"),
    detected_protein_info = os.path.join(EXPERIMENT_DIR, "output/00_database_resources/detected_protein_resources/00_detected_protein_info.txt")
  output:
    database_taxonomy=os.path.join(EXPERIMENT_DIR, "output/03_output_files/database_taxonomy.tsv"),
    database_metrics=os.path.join(EXPERIMENT_DIR, "output/03_output_files/database_metrics.tsv"),
    detected_protein_taxonomy = os.path.join(EXPERIMENT_DIR, "output/03_output_files/detected_protein_taxonomy.tsv"),
    detected_protein_metrics = os.path.join(EXPERIMENT_DIR, "output/03_output_files/detected_protein_metrics.tsv"),
    combined_metrics = os.path.join(EXPERIMENT_DIR, "output/03_output_files/combined_metrics.tsv")
  log: get_log_path("extract_metrics")
  container: "apptainer/conduitR.sif"
  script:
    "scripts/04_ingestion_into_R/01_extract_metrics.R"
    
# Prepare a conduit object
# Experiment metadata = date of experiment
# Database taxonomy = n proteins belonging to each taxa in database
# database metrics = n_proteins, n_organism_types, domain, kingdom, phylum, class, order, family, genus,species
# detected protein taxonomy = n proteins detected belonging to each taxa
# detected protein metrics = n_protein_groups,n_uniquely_ided_proteins,n_precursors,n_peptides n_organism_types, domain, kingdom, phylum, class, order, family, genus,species
rule create_conduit:
  input:
    qf = os.path.join(EXPERIMENT_DIR, "output/03_output_files/qf.rds"),
    database_taxonomy = os.path.join(EXPERIMENT_DIR, "output/03_output_files/database_taxonomy.tsv"),
    database_metrics = os.path.join(EXPERIMENT_DIR, "output/03_output_files/database_metrics.tsv/"),
    detected_protein_taxonomy = os.path.join(EXPERIMENT_DIR, "output/03_output_files/detected_protein_taxonomy.tsv"),
    detected_protein_metrics = os.path.join(EXPERIMENT_DIR, "output/03_output_files/detected_protein_metrics.tsv")
  output:
    conduit_obj = os.path.join(EXPERIMENT_DIR, "output/03_output_files/conduit_output.rds")
  log: get_log_path("create_conduit")
  container: "apptainer/conduitR.sif"
    # From this point- the conduit object contains all the stuff you need. 
    # Load that into Conduit GUI.
  script:
    "scripts/04_ingestion_into_R/02_create_conduit_obj.R"